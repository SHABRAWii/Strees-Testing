{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// C:\Users\shabrawii\AppData\Roaming\Code\User\snippets
	"Print to console": {
	"scope": "cpp",
		"prefix": "c++",
	 	"body": [
			"#include <bits/stdc++.h>"
			,""
			,"using namespace std; "
			,""
			,"#define FIO cin.tie(0),ios::sync_with_stdio(0),cout.tie(0)"
			,"#define oo __LONG_LONG_MAX__"
			,"#define ooi INT32_MAX"
			,"#define endl '\\n'"
			,"#define ll long long "
			,""
			,"bool DB = 0;"
			,""
			,"int main(){ "
			,"    #ifdef VS_FreeOpen "
			,"        freopen(\"input.in\", \"r\", stdin); "
			,"        freopen(\"output.in\", \"w\", stdout); "
			,"        DB = 0;"
			,"    #endif "
			,"    FIO; "
			,""
			,"    int tc = 1;"
			,"    cin >> tc;"
			,"    while(tc--){"
			,"        $1"
			,"        "
			,"        "
			,"    }"
			,""
			,"    return 0;"
			,"}"
			,"/*"
			,""
			,"*/"
	 	],
	// 	"description": "Log output to console"
	},
	"input Loop": {
		"scope": "cpp",
			"prefix": "forI",
				"body": [
					"for(int i = 0 ; i < ${1:n} ; ++i){",
					"    cin >> ${arr}[i];",
					"}"
				],
		// 	"description": "Log output to console"
	},
	"output Loop": {
		"scope": "cpp",
			"prefix": "forO",
				"body": [
					"for(int i = 0 ; i < ${1:n} ; ++i){",
					"    cout << ${arr}[i] << \" \\n\"[i + 1 == n];",
					"}"
				],
		// 	"description": "Log output to console"
	},
	"For_Each1": {
		"scope": "cpp",
			"prefix": "fore",
				"body": [
					"for(auto &it : ${1:vec}){",
					"    cout << it << \" \\n\"[(&it + 1) == &*${1:vec}.end()];",
					"}"
				],
		// 	"description": "Log output to console"
	},
	"For_Each1Array": {
		"scope": "cpp",
			"prefix": "forea",
				"body": [
					"for(auto &it : ${0:arr}){",
					"    cout << it << \" \\n\"[(&it + 1) == (${0:arr} + sizeof(${0:arr})/sizeof(${0:arr}[0]))];",
					"}"
				],
		// 	"description": "Log output to console"
	},
	"vector_begin": {
		"scope": "cpp",
			"prefix": ".bb",
				"body": [
					".begin()"
				],
		// 	"description": "Log output to console"
	},
	"vector_end": {
		"scope": "cpp",
			"prefix": ".ee",
				"body": [
					".end()"
				],
		// 	"description": "Log output to console"
	}, 
	"Size": {
		"scope": "cpp",
			"prefix": ".sz",
				"body": [
					".size()$1"
				],
		// 	"description": "Log output to console"
	},
	"empty": {
		"scope": "cpp",
			"prefix": ".em",
				"body": [
					".empty()$1"
				],
		// 	"description": "Log output to console"
	},
	"pushback": {
		"scope": "cpp",
			"prefix": ".pb",
				"body": [
					".push_back($1)"
				],
		// 	"description": "Log output to console"
	},
	"Free_Open": {
		"scope": "cpp",
			"prefix": "freopenS",
				"body": [
					"#ifdef VS_FreeOpen ",
					"    freopen(\"input.in\", \"r\", stdin);", 
					"    freopen(\"output.in\", \"w\", stdout);", 
				    "#endif"
				],
		// 	"description": "Log output to console"
	},
	"forGrapg": {
		"scope": "cpp",
			"prefix": "forGr",
				"body": [
					"for(int e = head[${1:u}] ; ~e ; e = nxt[e]){",
					"    int v = to[e];",
					"    $2",
					"}"
				],
		// 	"description": "Log output to console"
	},
	"Temp": {
		"scope": "cpp",
			"prefix": "Temp",
				"body": [
					"Enter your Template"
				],
		// 	"description": "Log output to console"
	},
}